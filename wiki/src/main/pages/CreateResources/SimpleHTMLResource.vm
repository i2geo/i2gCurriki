## http://next.dev.curriki.org/xwiki/bin/edit/CreateResources/SimpleHTMLResource
## originally from http://next.dev.curriki.org/xwiki/bin/edit/CreateResources/SimpleWikiResource?language=en
## NPM attempting to emulate first form in http://www.curriki.org/xwiki/bin/view/Project/Form+Templates?xpage=print&language=en
##
## ---------- PREAMBLE, CHECK AUTHORIZATION ----------
##
##UNCOMMENT-TO-USE-LOCAL-STYLESHEET <link rel="stylesheet" href="/xwiki/bin/view/CreateResources/styleG?xpage=plain" type="text/css" />
##
#if( $context.user=="XWiki.XWikiGuest" ) ## {
  #set( $logredir = $xwiki.getRequestURL() )
  #set( $url = $xwiki.getURL("XWiki.XWikiLogin","login","xredirect=$logredir") )
  $msg.get("createresources.needaccount", [$url])
#else ## } {
  ##
  ## ----- OK, WE HAVE AUTHORITY SETUP THE FORM POST/GET ETC  -----
  ##
  #includeMacros("CreateResources.StyledMacros")
  ##  parameters passed by other forms or itself
  #set( $pageName   = $request.getParameter("pageName") )
  #set( $cameFrom   = $request.getParameter("cameFrom") )
  #set( $flow       = $request.getParameter("flow") )
  #set( $parentPage = $request.getParameter("parentPage") )
  #set( $publishSpace = $request.getParameter("publishSpace") )

## DEBUG DEBUG DEBUG
## <p>( before setting newAsset '$!request.page $request.method ): newTextAsset: '$!newTextAsset' , newAsset: '$!newAsset' , pageName: '$!pageName' , cameFrom: '$!cameFrom' , flow: '$!flow' , parentPage: '$!parentPage' , publishSpace: '$!publishSpace'</p>
## DEBUG DEBUG DEBUG
  #if( "$!pageName" != "" ) ## {
     ## pageName is name of previously created asset, get it and use it.
     #set( $newAsset  = $xwiki.curriki.fetchAsset($pageName) )
  #else ## } {
    ## empty pageName means no asset... so create new one. This is "default" action
     #set( $newAsset = $xwiki.curriki.createAsset($xwiki.null) )
     ## note-below: <input type="hidden"	name="pageName"		value="$!newAsset.fullName"	/>
     ## so followup POSTs set pageName to newly created asset, i.e. condition below:
  #end ## }

  #if( "$!newAsset"=="" ) ## {
    #if( "$!pageName" != "" )<p>asset creation error:</p>#else<p>asset lookup error:</p>#end
    <dl>
      <dt>request.method</dt><dd>$!request.method</dd>
      <dt>request.page</dt><dd>$!request.page</dd>
      <dt>getParameter("pageName")</dt><dd>$!pageName</dd>
      <dt>getParameter("cameFrom")</dt><dd>{pre}$!cameFrom{/pre}</dd>
      <dt>getParameter("flow")</dt><dd>$!flow</dd>
      <dt>getParameter("parentPage")</dt><dd>$!parentPage</dd>
      <dt>getParameter("publishSpace")</dt><dd>$!publishSpace</dd>
    </dl>
  #else ## } ----- $newAsset defined for entire branch below ----- {
  ## create or get newTextAsset -- used to display WYSIWYG editor
  #if( !$newAsset.getObject("CurrikiCode.TextAssetClass") ) ## {
    ## create TextAssetClass for use by WYSIWYG
    #set( $newTextAsset = $newAsset.newObject("CurrikiCode.TextAssetClass") )
  #else ## } {
    ## fetch existing TextAssetClass for use by WYSIWYG
    #set( $newTextAsset = $newAsset.getObject("CurrikiCode.TextAssetClass") )
  #end ## }
## DEBUG DEBUG DEBUG
## <p>( '$!request.page $request.method ): newTextAsset: '$!newTextAsset' , newAsset: '$!newAsset' , pageName: '$!pageName' , cameFrom: '$!cameFrom' , flow: '$!flow' , parentPage: '$!parentPage' , publishSpace: '$!publishSpace'</p>
## DEBUG DEBUG DEBUG
##
## ---------- JAVASCRIPT SPECIFICALLY FOR THIS FORM ----------
##
{pre}
<style type="text/css">
input {	width:expression(this.type=="text" ? "83%" : "style"); }
</style>
<script type="text/javascript" src="/xwiki/yui/yahoo/yahoo-min.js" ></script>
<script type="text/javascript" src="/xwiki/yui/treeview/treeview-min.js" ></script>
<script type="text/javascript" src="/xwiki/yui/treeview/checknode.js"></script>
<script language="javascript" type="text/javascript">
// ----------------------------------- override YUI checknode method -------------------
/**
 * jsj add
 *Invoked when the user press space key
 */
YAHOO.widget.CheckNode.prototype.getKeyCheck = function() {
    return " if( 32 == (window.event ? event.keyCode : event.which) ){ "+"YAHOO.widget.TreeView.getNode(\'" + this.tree.id + "\'," +
        this.index + ").checkClick();"+"if (event.preventDefault) event.preventDefault( ); else event.returnValue = false;}";
};

// Overrides YAHOO.widget.TextNode
YAHOO.widget.CheckNode.prototype.getNodeHtml = function() {
    // this.logger.log("Generating html");
    var sb = new Array();

    sb[sb.length] = '<table border="0" cellpadding="0" cellspacing="0">';
    sb[sb.length] = '<tr>';

    for (i=0;i<this.depth;++i) {
        sb[sb.length] = '<td class="' + this.getDepthStyle(i) + '">&#160;</td>';
    }

    sb[sb.length] = '<td';
    sb[sb.length] = ' id="' + this.getToggleElId() + '"';
    sb[sb.length] = ' class="' + this.getStyle() + '"';
    if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
    }
    sb[sb.length] = ' onclick="javascript:' + this.getToggleLink() + '">&#160;';
    sb[sb.length] = '</td>';

    // check box
    sb[sb.length] = '<td';
    sb[sb.length] = ' id="' + this.getCheckElId() + '"';
    sb[sb.length] = ' class="' + this.getCheckStyle() + '"';
    sb[sb.length] = ' onclick="javascript:' + this.getCheckLink() + '">';
    sb[sb.length] = '&#160;</td>';


    sb[sb.length] = '<td>';
    sb[sb.length] = '<a';
    sb[sb.length] = ' id="' + this.labelElId + '"';
    sb[sb.length] = ' class="' + this.labelStyle + '"';
    sb[sb.length] = ' href="' + this.href + '"';
    sb[sb.length] = ' target="' + this.target + '"';
    if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
    }
    sb[sb.length] = ' onkeypress="javascript:' + this.getKeyCheck(this.event)+'">';
    //sb[sb.length] = '>';
    sb[sb.length] = this.label;
    sb[sb.length] = '</a>';
    sb[sb.length] = '</td>';
    sb[sb.length] = '</tr>';
    sb[sb.length] = '</table>';

    return sb.join("");
};
/* <![CDATA[ */
//
//
//
function checkSimpleResourceForm() {
  var missed_fields_str = '';
  if (getFieldContentStr('CurrikiCode.AssetClass_0_title') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.title')');
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_description') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.description')');
  }
  {
    /*var form_fw_items = getFieldContentStr('CurrikiCode.AssetClass_0_fw_items');
    if ((form_fw_items == null) || (form_fw_items == 'FW_masterFramework.WebHome')) {
      missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.subject')');
    }*/
var ttc = getFieldContentStr('XWiki.AssetClass_0_trainedTopicsAndCompetencies');
    if(ttc==null || ttc.length<=1)
          missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.trainedTopicsAndCompetencies')');
  }
  }
  { // Eductional-Level -- for validation, must look at "checked" on each button.
   /* var one_checked = false;
    for (var idx = 0, form_checkboxes = document.forms.inline['CurrikiCode.AssetClass_0_educational_level'];
	 ((idx < form_checkboxes.length) && !one_checked);
	 idx++) {
      if (form_checkboxes[idx].checked) {
	    one_checked = true;
      }
    }
    if (!one_checked) {*/
var eduLF = getFieldContentStr('XWiki.AssetClass_0_eduLevelFine');
    if(eduLF == null || eduLF.length <=1) {
      missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.eduLevelFine')');
        }
  }
  if ($('CurrikiCode.AssetClass_0_instructional_component').value.length <= 1) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.ict')');
  }
  if (getWysiwygFieldContent('slp_text') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.content')');
  }
  if (getFieldContentStr('CurrikiCode.AssetLicenseClass_0_rightsHolder') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.rights')');
  }

  var error_msg = "";
  if(missed_fields_str != ''){
	error_msg = '$msg.get('form.scratch.required.fields.dialog')' + missed_fields_str;
  }else{
    if (getFieldContentStr('CurrikiCode.AssetClass_0_title').length > 250) {
      error_msg = '$msg.get("form.scratch.title.more.250")';
    }
  }


  if (error_msg != '') { // since theres error messages, validation failed... bail out.
    alert(error_msg);
    setSuccessMessage('');     //not POSTing due to 'false' return below, so this should not matter -- reset in case of going "back" in browser after successful POST??
    return false;
  }
  else { 			 // SUCCESS!
    setTextAssetToHtmlText(formatTextareasIntoHtmlText());
    setSuccessMessage('$msg.get('form.done.created.resource')');
    return true;
  }
}
//
//
//
function checkSimpleResourceDirty() {
  if (getFieldContentStr('CurrikiCode.AssetClass_0_title') != null) {
    return true;
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_description') != null) {
    return true;
  }
  {
    var contents_o = tinyMCE.get('slp_text');
    if ((contents_o != null) && contents_o.isDirty()) {
      return true;
    }
  }
  return false;
}
//
// To be called after validation of all required fields, this function
// concatenates all the textarea and wysiwyg fields in the form
//
function formatTextareasIntoHtmlText() { 			
  var slp_str = '';		// the string we concat into the TextAssetClass contents  
  var vert_break_str = '<br />'
  {
    var form_content = getWysiwygFieldContent('slp_text');
    if (form_content != null) {
      slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + form_content;
    }
  } 
 
  return (slp_str);
}
// set value POSTed via form hidden field w/
// id="XWiki.TextAssetClass_0_text" and default
// value="$msg.get('form.done.wysiwyg.error.wikitext')" (which if received
// on POST, indicates an unexpected error condition has occurred).
function setTextAssetToHtmlText(str) {
  var input_field_TextAssetClass_o = $('CurrikiCode.TextAssetClass_0_text');
  if (input_field_TextAssetClass_o != null) {
    input_field_TextAssetClass_o.value = str;
  }
  else { alert('error in setTextAssetToHtmlText()'); }
}
//
// return field's contents as string. returns null if field is empty or in case of 
// lookup error.
//
function getFieldContentStr(field_id_str) {
  var field_content_o   = $(field_id_str);
  var field_content_str = (field_content_o==null) ? "" : field_content_o.value;
  if ((field_content_str.length < 1) || (field_content_str.trim() == '')) {
    return (null);
  }
  else {
    return (field_content_str);
  }
}
// get wysiwyg contents... returns null if no content, else string of
// wikitext.  if wysiwyg_id_str WYSIWYG is not created due to platform or
// browser issues, fallback to using values in textarea assoc'd with
// wysiwyg (in which case plaintext, not wikitext).
function getWysiwygFieldContent(textarea_fallback_id_str) {
  var wysiwyg_content_o = tinyMCE.get(textarea_fallback_id_str); // WYSIWYG Associated with "Content"
  if (wysiwyg_content_o == null) { // no WYSIWYG-->falback to textarea contents...   
      return null;	   // --> return signal for empty fallback textarea contents  
  }
  else if (!wysiwyg_content_o.isDirty()) { // WYSIWYG exists but empty...
    return null;		// --> return signal for empty contents
  }
  else {			// WYSIWYG exists with content...
    return (wysiwyg_content_o.getContent());
  }
}
// set value POSTed via form hidden field w/ id="successMessage" and
// default value="" (which if received on POST, indicates an unexpected
// error condition has occurred). A nonempty string-value indicates
// validation success, the contents are displayed in AssetDone as $successMessage.
function setSuccessMessage(str) {
  var input_field_successMessage_o = $('successMessage');
  if (input_field_successMessage_o != null) {
    input_field_successMessage_o.value = str;
  }
  else { alert('error in setSuccessMessage()'); }
}
//
//
//
function appendSeparatedErrorMessageStr(message_str, missed_field_err_str) {
  return(message_str + '\n\t\t' + missed_field_err_str);
}
// 
// set and clear the unload dialog.
// 
var needUnloadDialog = false;
function clearUnloadDialog() {
  // window.onbeforeunload = null;
  // Ext.EventManager.on(window, 'beforeunload', void);
  needUnloadDialog = false;
}
//
// window.onbeforeunload -- warn of data-loss
//
function onWindowUnloading(e) {
  // if the form is not "dirty" don't pop form.leaving.dialog
  if (needUnloadDialog && checkSimpleResourceDirty()) {
    e.browserEvent.returnValue = "$msg.get('form.leaving.dialog')";
  }
}
//
// Note that setUnloadDialog() called at bottom of page...
//
function setUnloadDialog() {
  // window.onbeforeunload = unloadDialog;
  Ext.EventManager.on(window, 'beforeunload', onWindowUnloading); 
  needUnloadDialog = true;
}
/* ]]> */
</script>{/pre}
#set( $noDialogs = $request.getParameter("noDialogs") )  ## ?noDialogs=1 turns off add-path dialogs, for testing, or to enable "edit-again"
  ##
  ## -------------------- THE MAIN DISPLAY --------------------
  ##
  <div class="header">
  #curriki_formtitle($msg.get("form.html.scratch.title"))
  <br />$msg.get("form.required.fields.instruction")
  </div>
  ##
  ## --------------------FORM ITSELF --------------------
  ##
  ## NB: default action goes back to this form, which shouldnt happen, because,
  ## after successful validation via call to checkSimpleResourceForm(), the button
  ## below sets document.forms.inline.action='$msg.get("form.done.url")'
  ##
  <form action="" class="curriki-form1" id="inline" method="post">
  ## 
  ## Xredirect foo 
  ##
  <input type="hidden" name="xredirect" value="$xwiki.getFormEncoded($xwiki.getRequestURL())" />
  ##
  ## XWiki.AssetClass_0_category is a "fake" property named "category" in XWiki.AssetClass.
  ## This is forced here to value "text". This hidden field is passed to AssetDone 
  ## via POST and instantiated via .updateObjectFromRequest("XWiki.AssetClass")
  <input type="hidden"  name="CurrikiCode.TextAssetClass_0_text" id="CurrikiCode.TextAssetClass_0_text" value="$msg.get('form.done.wysiwyg.error.wikitext')" />
  <input type="hidden"  name="CurrikiCode.AssetClass_0_category" id="CurrikiCode.AssetClass_0_category" value="text" /> 
  ## successMessage is a hidden field that is set to a string in validation javascript
  ## after successful validation. If AssetDone gets a POST with the default value of "" set here
  ## it will ignore the post as it means it's not validated.
  <input type="hidden" 	name="successMessage" id="successMessage" value=""      />
  <input type="hidden" 	name="page"		value="$!request.page"		/>
  <input type="hidden"	name="pageName"		value="$!newAsset.fullName"	/>
  <input type="hidden"	name="publishSpace"	value="$!publishSpace"		/>
  <input type="hidden"	name="parentPage"	value="$!parentPage"		/>
#if( "$!noDialogs"!="" )                ## { when ?noDialogs=... argument set, pass it on to AssetDone
  <input type="hidden"	name="noDialogs"	value="$noDialogs"		/>
#else                                   ## } {  -- ?noDialogs... not set, pass parameters used for add-path dialogs
  <input type="hidden"	name="flow"		value="$!flow"			/>
  <input type="hidden"	name="createLessonURL"		value="$msg.get('form.html.scratch.url')"	/> ## for ICT
  <input type="hidden"	name="cameFrom"
  #if( "$!cameFrom"=="" )              ## {
   value="$msg.get('form.html.scratch.url')" ## default cameFrom to this form
  #else                                ## } {
   value="{pre}$!cameFrom{/pre}"                  ## pass along cameFrom
  #end                                 ## }
  />
#end                                   ## }
#####################################################################
  #curriki_formpart_begin($msg.get("form.html.scratch.step1.header")) ## {
  #curriki_forminstructions($msg.get("form.html.scratch.step1.instruction"))
  #curriki_formprompt($msg.get("form.html.scratch.title_title"), $msg.get("form.html.scratch.title_tooltip"), $msg.get("form.html.scratch.title_txt"), true, "medium")
  ##$newAsset.display("title","edit")
  <input type="text" id="CurrikiCode.AssetClass_0_title" name="CurrikiCode.AssetClass_0_title" />
  #curriki_formprompt($msg.get("form.html.scratch.description_title"), $msg.get("form.html.scratch.description_tooltip"), $msg.get("form.html.scratch.description_txt"), true, "medium")
  $newAsset.display("description","edit")
  <table class="subject-educational"><tbody><tr><td>
  #curriki_formprompt($msg.get("sri.trainedTopicsAndCompetencies_title"), $msg.get("sri.trainedTopicsAndCompetencies_tooltip"), $msg.get("sri.trainedTopicsAndCompetencies_txt"), true, "")
##  curriki_formprompt($msg.get("sri.fw_items_title"), $msg.get("sri.fw_items_tooltip"), $msg.get("sri.fw_items_txt"), true, "")
##  $newAsset.display("fw_items","edit")
 #skbListHereEditable("XWiki.AssetClass_0_trainedTopicsAndCompetencies" "trainedTopicsAndCompetencies_pane" "competency,topic" "$!asset.trainedTopicsAndCompetencies")
  </td><td>
  #curriki_formprompt($msg.get("sri.eduLevelFine_title"), $msg.get("sri.eduLevelFine_tooltip"), $msg.get("sri.eduLevelFine_txt"), true, "")
  ## #curriki_formprompt($msg.get("sri.educational_level_title"), $msg.get("sri.educational_level_tooltip"), $msg.get("sri.educational_level_txt"), true, "medium")
  ##$newAsset.display("educational_level2","edit") 
  #skbListHereEditable("XWiki.AssetClass_0_eduLevelFine" "eduLevelFine_pane" "level" "")
</td></tr></tbody></table> ##class="subject-educational"
  #curriki_formprompt($msg.get("sri.instructional_component2_title"), $msg.get("sri.instructional_component2_tooltip"), $msg.get("sri.instructional_component2_txt"), true, "medium")
  $newAsset.display("instructional_component","edit")
  #curriki_formprompt($msg.get("sri.keywords_title"), $msg.get("sri.keywords_tooltip"), $msg.get("sri.keywords_txt"), false, "medium")
  $newAsset.display("keywords","edit")
  #curriki_formprompt($msg.get("sri.language_title"), $msg.get("sri.language_tooltip"), $msg.get("sri.language_txt"), false, "medium")
  <select name="CurrikiCode.AssetClass_0_language" size="1" style="position:absolute; left:8; top:8; width:88; height:22; display:block;" onchange="EintragPruefen('ComboBox', 'Edit')">
    <option value='${con.getLanguageId($lang,true)}'>$con.getLanguageName($lang,$lang)</option>
    #set($supportedLanguages2 = $xwiki.getXWikiPreference("languages").replaceAll(","," "))
    #foreach($lang2 in $supportedLanguages2.split(" "))##
	  #if($lang!=$lang2)
		  <option value='${con.getLanguageId($lang2,true)}'>$con.getLanguageName($lang2,$lang2)</option>
	  #end
	  #end
</select>
  ##$newAsset.display("language","edit")
  #curriki_formpart_end() ## }
#####################################################################
  #curriki_formpart_begin($msg.get("form.html.scratch.step2.header")) ## {
  #curriki_forminstructions($msg.get("form.html.scratch.step2.instruction"))
  #curriki_formprompt($msg.get("form.html.scratch.step2.content.title"), "", $msg.get("form.html.scratch.step2.content.instruction"), true, "medium")
  ##$newTextAsset.display("text", "edit") ##WYSIWYG editor
  <textarea id='slp_text' name='slp_text' style='height: 450px'></textarea> 
  #curriki_formpart_end() ## }
#####################################################################
  #curriki_formpart_begin($msg.get("form.scratch.step3.header")) ## {
  #curriki_forminstructions($msg.get("form.scratch.step3.instruction"))
  #curriki_formprompt($msg.get("sri.hidden_from_search_title"), $msg.get("sri.hidden_from_search_tooltip"), $msg.get("sri.hidden_from_search_txt"), false, "medium")
  $newAsset.display("hidden_from_search","edit")
  <label>$msg.get("sri.hidden_from_search_after")</label>		##special case where text is needed after display(), which appears as label-less toggle
  #curriki_formprompt($msg.get("sri.right_holder_title"), $msg.get("sri.right_holder_tooltip"), $msg.get("sri.right_holder_txt"), true, "medium")
  $newAsset.display("rightsHolder","edit")
  #curriki_formprompt($msg.get("sri.rights_title"), $msg.get("sri.rights_tooltip"), $msg.get("sri.rights_txt"), false, "medium")
  $newAsset.display("rights","edit")
  #curriki_formprompt($msg.get("sri.license_type_title"), $msg.get("sri.license_type_tooltip"), $msg.get("sri.license_type_txt"), false, "medium")
  <p><label>$msg.get("sri.license_type_heading")</label></p>		##special case where additional text is needed as prompt before display()
  $newAsset.display("licenseType","edit")
  #curriki_formpart_end() ## }
#####################################################################
  #curriki_formpart_begin($msg.get("form.scratch.step4.header")) ## {
  <p><label>$msg.get("form.scratch.step4.instruction")</label></p>
  <p class="links">
     <button
      onclick="try { if (document.forms.inline.onsubmit) document.forms.inline.onsubmit(); if (checkSimpleResourceForm()) { clearUnloadDialog(); startWaitingDialog(); document.forms.inline.action='$msg.get("form.done.url")'; document.forms.inline.submit(); } return false; } catch(e) { alert('$msg.get("form.scratch.submit.button") button onclick error: '+e+' ...'); return false; }"
      >$msg.get("form.scratch.submit.button")</button>
     #if( "$!cameFrom" != "" ) ## { 
       #set( $cancelURL = $cameFrom )
     #else ## } {  
       #set( $cancelURL = $xwiki.getURL("Main.WebHome") ) ## cameFrom not set means go to WebHome
     #end ## }
     <button class="cancel"
      onclick="try { clearUnloadDialog(); window.location.href='{pre}$cancelURL{/pre}'; return false; } catch(e) { alert('$msg.get("form.scratch.cancel.button") button onclick error: '+e+' ...'); return false; }"
      >$msg.get("form.scratch.cancel.button")</button>
  </p>
  #curriki_formpart_end() ## }
#####################################################################
  <div class="tooltips">
    {pre} $xwiki.addTooltipJS() {/pre}
  </div>
  </form>
#set( $noWYSIWYG  = $request.getParameter("noWYSIWYG") ) ##For testing,etc, add parameter ?noWYSIWYG=1 to force WYSIWYG editors to not display, and use TEXTAREA instead
#if( "$!noWYSIWYG" == "" ) ## {
##curriki_wysiwyg_loader_preamble()
##curriki_wysiwyg_loader_editor($context.getEditorWysiwyg(), $newAsset) ## aka "mce_editor_0"
#if( "$!publishSpace"=="" )            ## {
 #set( $user = $context.user )
  #if( $user.startsWith("XWiki.") )    ## {
    #set( $shortname = $user.substring(6) )
  #else                                ## } {
    #set( $shortname = $user )
  #end                                 ## }
  #set( $wysi_publishSpace = "Coll_${shortname}" )
#else ## } {
  #set( $wysi_publishSpace = $publishSpace )
#end  
##curriki_SLP_wysiwyg_loader_editor("slp_text", $newAsset, $wysi_publishSpace) ## id="mce_editor_0"
{pre}
<script type="text/javascript" src="${request.contextPath}/tiny_mce32/tiny_mce.js"></script>
<script type="text/javascript">
	tinyMCE.init({
		// General options
		language: "en",
		mode : "exact",
		elements : "slp_text",
		theme : "advanced",
		plugins : "safari,table,save,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,media,searchreplace,print,contextmenu,paste,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras",

		// Theme options
		theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,formatselect,fontselect,fontsizeselect,forecolor,backcolor",
		theme_advanced_buttons2 : "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,image,media,cleanup,help,code",
		theme_advanced_buttons3 : "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,fullscreen",
		theme_advanced_toolbar_location : "top",
		theme_advanced_toolbar_align : "left",
		theme_advanced_statusbar_location : "",
		theme_advanced_resizing : true
	});
</script>{/pre}
#end ## } -- if "$!noWYSIWYG"==""
{pre}<script language="javascript" type="text/javascript">
/* <![CDATA[ */
/*
 * this javascript code  must be at end, otherwise  strange   things
 * happen, like "License Deed" doesn't show up...
 */
function startWaitingDialog() {
#if( "$!noDialogs"!="1" )  ## {
  Curriki.showLoading();
#end ## }
}
/*
 * on window unload, dialog warning of dataloss
 */
setUnloadDialog();
/* ]]> */
</script>{/pre}
#end ## } -- else, aka "$!newAsset"!="" 
#end ## } -- $context.user=="XWiki.XWikiGuest"